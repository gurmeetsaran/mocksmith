name: Auto Release

on:
  push:
    branches:
      - main
      - master

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      new_version: ${{ steps.check.outputs.new_version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install --with dev
        pip install python-semantic-release

    - name: Check if release needed
      id: check
      run: |
        # Use semantic-release to check if a release is needed
        # It will exit with 0 if changes would be made, 2 if no changes needed
        set +e
        semantic-release version --no-commit --no-tag --no-push --no-changelog --no-vcs-release
        EXIT_CODE=$?
        set -e

        if [ $EXIT_CODE -eq 0 ]; then
          echo "should_release=true" >> $GITHUB_OUTPUT
        else
          echo "should_release=false" >> $GITHUB_OUTPUT
        fi

  test-all-platforms:
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.9"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.3
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      shell: bash
      run: |
        poetry install --with dev --extras pydantic --extras mock

    - name: Lint with ruff
      shell: bash
      run: |
        poetry run ruff check src tests

    - name: Type check with pyright
      shell: bash
      run: |
        poetry run pyright

    - name: Run tests
      shell: bash
      run: |
        poetry run pytest tests -v --cov=mocksmith --cov-report=xml --cov-report=html --cov-report=term --cov-fail-under=59

  release:
    needs: [check-release, test-all-platforms]
    if: needs.check-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install --with dev

    - name: Python Semantic Release
      id: release
      uses: python-semantic-release/python-semantic-release@v9.15.2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        commit: true
        tag: true
        push: true
        changelog: true
        vcs_release: true  # Create GitHub release
        build: false  # We'll build manually with Poetry

    - name: Build distribution packages
      run: |
        poetry build

    - name: Upload artifacts to GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload "v${{ steps.release.outputs.version }}" dist/* --clobber

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
