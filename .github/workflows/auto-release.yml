name: Auto Release

on:
  push:
    branches:
      - main
      - master

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install --with dev
        pip install python-semantic-release

    - name: Get current version
      id: current_version
      run: |
        echo "version=$(poetry version -s)" >> $GITHUB_OUTPUT

    - name: Python Semantic Release
      id: release
      uses: python-semantic-release/python-semantic-release@v9.15.2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        # This will create a new tag and release
        tag_only: true  # Only create tag, don't create release yet

    - name: Check if new version was created
      id: check_version
      run: |
        NEW_VERSION="${{ steps.release.outputs.version }}"
        if [ -n "$NEW_VERSION" ] && [ "$NEW_VERSION" != "${{ steps.current_version.outputs.version }}" ]; then
          echo "new_release=true" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        else
          echo "new_release=false" >> $GITHUB_OUTPUT
        fi

    - name: Build package
      if: steps.check_version.outputs.new_release == 'true'
      run: |
        poetry version ${{ steps.check_version.outputs.new_version }}
        poetry build

    - name: Check package
      if: steps.check_version.outputs.new_release == 'true'
      run: |
        pip install twine
        twine check dist/*

    - name: Publish to PyPI
      if: steps.check_version.outputs.new_release == 'true' && false  # TODO: Change to true after setting up PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true

    - name: Upload to GitHub Release
      if: steps.check_version.outputs.new_release == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload v${{ steps.check_version.outputs.new_version }} dist/* --clobber
